# hermes_lite/docker-compose.yml
version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:3.13-management-alpine"
    container_name: hermes_rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - hermes_network

  web:
    build: ./web_api
    ports:
      - "5000:5000"
    volumes:
      - ./web_api:/app
      - web_data:/app/data
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - JWT_SECRET_KEY=your_jwt_secret_key
      - SSH_USERNAME=demo_user
      - SSH_PASSWORD=demo_password
    depends_on:
      - target_host_alpha
      - target_host_beta

  worker:
    build:
      context: ./web_api # Worker uses the same environment as the web_api
#      dockerfile: Dockerfile  # Add this line
    container_name: hermes_worker
    command: celery -A extensions.celery_app worker -l info
    volumes:
      - ./web_api:/app # Mount app code
      - ./data:/app/data # Mount data directory for SQLite DB
      - ./agent:/app/agent # Make agent code accessible if worker needs it
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://user:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=db+sqlite:///data/hermes_lite.db
      - DATABASE_URL=sqlite:///data/hermes_lite.db
      - PYTHONUNBUFFERED=1 # For Celery logs
    networks:
      - hermes_network

  target_host_alpha:
    build: ./target_host_alpha
    hostname: alpha
    networks:
      - target_network

  target_host_beta:
    build: ./target_host_beta
    hostname: beta
    networks:
      - target_network

volumes:
  rabbitmq_data:
  web_data:

networks:
  hermes_network:
    driver: bridge
  target_network:
    driver: bridge
