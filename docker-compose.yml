# hermes_lite/docker-compose.yml
version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:3.13-management-alpine"
    container_name: hermes_rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - hermes_network

  web:
    build:
      context: ./web_api
      dockerfile: Dockerfile
    container_name: hermes_web_api
    ports:
      - "5001:5000" # Flask app port
    volumes:
      - ./web_api:/app # Mount app code for live reload
      - ./data:/app/data # Mount data directory for SQLite DB
      - ./agent:/app/agent # Make agent code accessible if web needs to know about it (e.g. list commands)
    depends_on:
      - rabbitmq
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py # Explicitly set FLASK_APP
      - CELERY_BROKER_URL=amqp://user:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=db+sqlite:///data/hermes_lite.db
      - DATABASE_URL=sqlite:///data/hermes_lite.db
      - API_KEY=SUPER_SECRET_API_KEY # Simple auth
      - SECRET_KEY=your_secure_secret_key
      - JWT_SECRET=your_secure_jwt_secret
    networks:
      - hermes_network
    command: flask run --host=0.0.0.0 --reload

  worker:
    build:
      context: ./web_api # Worker uses the same environment as the web_api
    container_name: hermes_worker
    command: celery -A extensions.celery_app worker -l info
    volumes:
      - ./web_api:/app # Mount app code
      - ./data:/app/data # Mount data directory for SQLite DB
      - ./agent:/app/agent # Make agent code accessible if worker needs it
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://user:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=db+sqlite:///data/hermes_lite.db
      - DATABASE_URL=sqlite:///data/hermes_lite.db
      - PYTHONUNBUFFERED=1 # For Celery logs
      - SECRET_KEY=your_secure_secret_key
      - JWT_SECRET=your_secure_jwt_secret
    networks:
      - hermes_network

  worker2:
    build:
      context: ./web_api # Worker uses the same environment as the web_api
    container_name: hermes_worker2
    command: celery -A extensions.celery_app worker -l info --hostname=worker2@%h
    volumes:
      - ./web_api:/app # Mount app code
      - ./data:/app/data # Mount data directory for SQLite DB
      - ./agent:/app/agent # Make agent code accessible if worker needs it
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://user:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=db+sqlite:///data/hermes_lite.db
      - DATABASE_URL=sqlite:///data/hermes_lite.db
      - PYTHONUNBUFFERED=1 # For Celery logs
      - SECRET_KEY=your_secure_secret_key
      - JWT_SECRET=your_secure_jwt_secret
    networks:
      - hermes_network

  target_host_alpha:
    build:
      context: . # Build from the project root
      dockerfile: ./target_host_alpha/Dockerfile
    container_name: hermes_target_alpha
    volumes:
      # This volume mount is crucial for development. It makes the local ./agent directory
      # available inside the container at /agent_files, overriding what was COPYied into the image.
      # The agent.py script and predefined_commands will be run from this mount.
      - ./agent:/agent_files
    # Ensure shell scripts in the mounted volume have proper permissions
    command: >
      /bin/sh -c "
        chmod +x /agent_files/predefined_commands/*.sh &&
        python /agent_files/agent.py
      "
    ports:
      - "9001:9000" # Expose agent port: host_port:container_agent_port
    environment:
      - AGENT_PORT=9000 # Agent will listen on this port inside the container
      - PYTHONUNBUFFERED=1
    networks:
      - hermes_network

  target_host_beta:
    build:
      context: . # Build from the project root
      dockerfile: ./target_host_beta/Dockerfile
    container_name: hermes_target_beta
    volumes:
      - ./agent:/agent_files
    # Ensure shell scripts in the mounted volume have proper permissions
    command: >
      /bin/sh -c "
        chmod +x /agent_files/predefined_commands/*.sh &&
        python /agent_files/agent.py
      "
    ports:
      - "9002:9000" # Different host port for the second agent
    environment:
      - AGENT_PORT=9000
      - PYTHONUNBUFFERED=1
    networks:
      - hermes_network

volumes:
  rabbitmq_data:

networks:
  hermes_network:
    driver: bridge
